What happens when you initialize a
repository? Why do you need to do it?

Git places a .git file for commit
storage in the directory. It turns
the directory into a repository
in which you can run git commands.
This way, you can utilize the cool
features git offers, such as commits,
git log, git clone, etc. It turns the
directory into something much more
effective when editing code.

How is the staging area different from
the working directory and the repository?
What value do you think it offers?

I think the staging area is where you
put the files that you want to link
to git before you commit them. It's
inside the working directory, which
should have every file in the repository
whether you choose to commit them or not.

How can you use the staging area to make
sure you have one commit per logical change?

If you use git status, you'll be able to see
if the file has been modified. You could also
use git diff --staged to see what has been
changed to the file inside the staging area.
If you don't want to keep your changes, you
can always (double check!) use fit checkout
master in order to revert those changes. The
staging area helps to "isolate" the files that
will be changed. This keeps order (AWE-some!).

What are some situations when branches would be
helpful in keeping your history organized? How
would branches help?

branches would help if I'm doing something
to my project that I'm not sure I want to
keep, if I want to create a different version,
etc. It would be helpful in keeping me organize.
If I choose create a different layout on
html/css that I'm not sure about, I could save
it in a different branch and easily switch between
the two, when I'm ready to compare. Or I could
show a potential client two or more versions so
they have the decision on the route they want to
go. There's so much more room for activities!

How do the diagrams help you visualize the branch
structure?

The diagram is useful so that you can see how your
branches are set up and whether or not a commit is
unreachable. I'm thinking, if a commit is
unreachable, you probably want to create a new
branch from it. This way, if you decide to keep
that commit, you can merge the branch into the
master.

What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

When two branches have merged, all of the commits
from the merging branch moves into the master
branch at the point diversion. Then you can delete
the merging branch without losing the commits and
all of the changes from that branch are applied to
the main project.
We represent it in the diagram so that we can
properly visualize what will happen and
you can respond accordingly. This way, you know
where everything will turn up and there is little
to no guess work involved.

What are the pros and cons of Gitâ€™s automatic merging
vs. always doing merges manually?

When Git merges automatically, it takes all of the
code that was modified and doesn't have a conflict
and places it where it goes. It's pretty neat and
saves you on hassle. The con to this feature is if
person a does something and person b does the same
but what they both did was done differently and in
a different place. you would have to watch out for
redundancy. When you merge manually, you have the 
chance to make sure that there is zero redundancy
and you can see what you're doing instead of trusting
a dumb computer. The con to this option? This would
take a very long time when you have more than 30
lines of code and it can be hard on the eyes.
