What happens when you initialize a
repository? Why do you need to do it?

Git places a .git file for commit
storage in the directory. It turns
the directory into a repository
in which you can run git commands.
This way, you can utilize the cool
features git offers, such as commits,
git log, git clone, etc. It turns the
directory into something much more
effective when editing code.

How is the staging area different from
the working directory and the repository?
What value do you think it offers?

I think the staging area is where you
put the files that you want to link
to git before you commit them. It's
inside the working directory, which
should have every file in the repository
whether you choose to commit them or not.

How can you use the staging area to make
sure you have one commit per logical change?

If you use git status, you'll be able to see
if the file has been modified. You could also
use git diff --staged to see what has been
changed to the file inside the staging area.
If you don't want to keep your changes, you
can always (double check!) use fit checkout
master in order to revert those changes. The
staging area helps to "isolate" the files that
will be changed. This keeps order (AWE-some!).

What are some situations when branches would be
helpful in keeping your history organized? How
would branches help?

branches would help if I'm doing something
to my project that I'm not sure I want to
keep, if I want to create a different version,
etc. It would be helpful in keeping me organize.
If I choose create a different layout on
html/css that I'm not sure about, I could save
it in a different branch and easily switch between
the two, when I'm ready to compare. Or I could
show a potential client two or more versions so
they have the decision on the route they want to
go. There's so much more room for activities!
